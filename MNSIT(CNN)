I am running this code on Google Colab.
NOTE: Use GPU in colab for faster processing power.

This is a very simple model of Multi label CLassification in MNIST dataset made using CNN(Convolutional Neural Network).

=========================================================================================================================================

# Importing libraries

import tensorflow as tf
from tensorflow import keras



# Downloding the dataset & splitting it

(train_image, train_label), (test_image, test_label) = tf.keras.datasets.mnist.load_data()



# Preprocesssing the data for our CNN model

train_image = train_image.reshape(train_image.shape[0], 28, 28, 1)
test_image = test_image.reshape(test_image.shape[0], 28 ,28, 1)

train_image = train_image.astype('float32')
test_image = test_image.astype('float32')

train_image = train_image/255
test_image = test_image/255

# Converting the Labels (i.e labels are in string format) into onr-hot encoder (i.e into numerical values becaise model work best with numbers)
train_label = tf.keras.utils.to_categorical(train_label, 10)
test_label = tf.keras.utils.to_categorical(test_label, 10)



# Creating the model

# model = tf.keras.models.Sequential([
#                                     tf.keras.layers.Flatten(input_shape=(28, 28)),
#                                     tf.keras.layers.Dense(128, activation='relu'),
#                                     tf.keras.layers.Dense(10, activation='softmax')
# ])

# model.summary()



# Creating a CNN model

model = tf.keras.models.Sequential([
                                    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),
                                    tf.keras.layers.MaxPooling2D((2,2), strides=2),
                                    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
                                    tf.keras.layers.MaxPooling2D((2,2), strides=2),
                                    tf.keras.layers.Flatten(),
                                    tf.keras.layers.Dropout(0.5),
                                    tf.keras.layers.Dense(200, activation='relu'),
                                    tf.keras.layers.Dense(10, activation='softmax')
])

model.summary()



# Compiling and training the model

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

history = model.fit(train_image, train_label, batch_size=120, epochs=10, validation_data=(test_image, test_label))



# Plotting graphs

import pandas as pd
import matplotlib.pyplot as plt

pd.DataFrame(history.history).plot(figsize=(7,7))
plt.grid=True
plt.gca().set_ylim(0, 1)
plt.show()



# Making Prediction 

import numpy as np

asset = model.predict(test_image)

a = np.argmax(asset[201])

print('Image:',a)

b = test_label[201]
print('Label:',b)


I achieved 99% accuracy in testing data, and this model was not ovefitting the data.
